#if defined(SHADOWS)
matrix objectWorldviewproj;
sampler objectShadow : register(s0);
float objectTexel;

matrix environmentWorldviewproj;
sampler environmentShadow : register(s1);
float environmentTexel;
#endif

#if defined(DIFFUSE)
sampler diffuse : register(s2);
#endif

#if defined(NORMAL)
sampler normalTex : register(s3);
#endif

float3 light;
float3 eye;
float specFac;

struct PS_INPUT
{
    vector diffuse : COLOR;
    float3 wpos    : TEXCOORD0;
    float3 normal  : TEXCOORD1;
#if defined(DIFFUSE) || defined(NORMAL)
    float2 texcoord: TEXCOORD2;
#endif
#if defined(NORMAL)
    float3 tangent : TEXCOORD3;
#endif
};

struct PS_OUTPUT
{
    vector diffuse : COLOR;
};

#if defined(SHADOWS)
float unpack(vector color)
{
    const vector shifts = vector(1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0));
    return dot(color, shifts);
}

float newsample(float2 c, float d, sampler shadow, float texel)
{
    float s = 0;

    for(float y = -1; y <= 1; ++y)
    {
        for(float x = -1; x <= 1; ++x)
        {
            float b = unpack(tex2D(shadow, c + float2(x * texel, y * texel)));
            if(b > d) ++s;
        }
    }

    return s * (1.0f / 9.0f);
}

float sampleShadow(PS_INPUT input, matrix worldviewproj, sampler shadow, float texel, float offset)
{
    vector diffuse = input.diffuse;

    vector pos = mul(float4(input.wpos, 1) + vector(input.normal * 0.01f, 0), worldviewproj);

    float2 c = 0.5f * pos.xy / pos.w + float2(0.5f, 0.5f);
    c.y = 1.0f - c.y;

    float s = 1 - newsample(c, (1 - (pos.z / pos.w)) + offset, shadow, texel);

    if(c.x >= 0 && c.x <= 1 && c.y >= 0 && c.y <= 1)
    {
        return 0.5f + (s * 0.5f);
    }

    return 1;
}
#endif

#if defined(NORMAL)
float3 getNormal(float3 normal_sample, float3 normal, float3 tangent)
{
    normal_sample = (normal_sample * 2.0f) - 1.0f;

    tangent = normalize(tangent - dot(tangent, normal) * normal);

    float3 bitangent = cross(normal, -tangent);
    float3x3 texspace = float3x3(tangent, bitangent, normal);

    return normalize(mul((float3)normal_sample, texspace));
}
#endif

PS_OUTPUT main(PS_INPUT input)
{
    PS_OUTPUT output = (PS_OUTPUT)0;

    float3 normal = normalize(input.normal);

    float specularFac = specFac;

#if defined(NORMAL)
    vector normSample = tex2D(normalTex, input.texcoord);
    specularFac = 1.0f - normSample.a;

    normal = getNormal(normSample.rgb, normal, input.tangent);
#endif

    float3 tolight = normalize(light);

    float s = dot(normal, tolight);
    if(s < 0.3f) s = 0.3f;

#if defined(DIFFUSE)
    output.diffuse = input.diffuse * tex2D(diffuse, input.texcoord) * s;
#else
    output.diffuse = input.diffuse * s;
#endif

#if defined(SHADOWS)
    if(dot(input.normal, light) < 0)
    {
        output.diffuse *= 0.5f;
        specularFac = 0;
    }
    else
    {
        float s1 = sampleShadow(input, environmentWorldviewproj, environmentShadow, environmentTexel, 0.005f);
        float s2 = sampleShadow(input, objectWorldviewproj, objectShadow, objectTexel, 0.0001f);

        if(s1 < 1 || s2 < 1) specularFac = 0;

        output.diffuse *= s1 * s2;
    }
#endif

    float3 view = normalize(eye - input.wpos);
    float3 ref = reflect(normalize(-light), normal);

    output.diffuse += (pow(saturate(dot(ref, view)), 4)) * specularFac;

    output.diffuse.a = 1;
    return output;
}
